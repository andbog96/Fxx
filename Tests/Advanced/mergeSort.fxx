(func length (list)
    (cond (not (islist list))
        0
        (plus 1 (length (tail list)))
    )
)

(func mergeSort (list)
    (cond (not (islist list))
        `()
        (prog (merge split)
            (func merge (lhs rhs)
                (prog (headLhs headRhs)
                    (setq headLhs (head lhs))
                    (setq headRhs (head rhs))
                    (cond (isnull headLhs)
                        rhs
                        (cond (isnull headRhs)
                            rhs
                            (cond (less headLhs headRhs)
                                (cons `(headLhs) (merge (tail lhs) rhs))
                                (cons (`headRhs) (merge lhs (tail rhs)))
                            )
                        )
                    )
                )
            )
            (func split (list)
                (prog (l)
                    (setq l (length list))
                    (setq left `())
                    (setq right list)
                    (setq i 0)
                    (while (less i (divide (plus l (mod l 2)) 2))
                        (prog ()
                            (setq element (head right))
                            (setq left (cons left `(element)))
                            (setq right (tail right))
                        )
                    )
                    `(left right)
                )
            )
            (setq parts (split list))
            (setq lhs (mergeSort (head parts)))
            (setq ths (mergeSort (head (tail parts))))
            (merge lhs rhs)
        )
    )
)

(mergeSort '(3 1 4 1 5 9 2 6 5 3 5)) 

(mergeSort '(-33 1500 -5.13 23 9005 -49 -200.13 6 5 2 5))

